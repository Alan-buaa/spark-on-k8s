apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: {{ template "spark-k8s-zeppelin-chart.fullname" . }}
  labels:
    app: {{ template "spark-k8s-zeppelin-chart.name" . }}
    chart: {{ template "spark-k8s-zeppelin-chart.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "spark-k8s-zeppelin-chart.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "spark-k8s-zeppelin-chart.name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}/{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: web-ui
              containerPort: 4040
              protocol: TCP
          command:
            - "/bin/bash"
            - "-c"
            - >
              export MASTER=k8s://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT;
              if [ "$usePVForNoteBooks" == "true" ]; then
                export ZEPPELIN_NOTEBOOK_DIR="/data/$notebookDir"
                mkdir -p "$ZEPPELIN_NOTEBOOK_DIR"
                cp -nR /zeppelin/notebook/* "$ZEPPELIN_NOTEBOOK_DIR"
              fi;
              if [ "$enableHistoryEvents" == "true" ]; then
                if [ "$usePVForEventsLog" == "true" ]; then
                  SPARK_EVENTS_DIR="/data/$eventLogDir"
                  mkdir -p "$SPARK_EVENTS_DIR"
                else
                  SPARK_EVENTS_DIR="$eventLogDir"
                fi
                SPARK_EVENT_LOG_CONFIG=" --conf spark.eventLog.enabled=true --conf spark.eventLog.dir=$SPARK_EVENTS_DIR"
              fi;
              export SPARK_SUBMIT_OPTIONS="$SPARK_SUBMIT_OPTIONS $SPARK_EVENT_LOG_CONFIG \
               --conf spark.kubernetes.driver.pod.name=$HOSTNAME \
               --conf spark.kubernetes.authenticate.driver.serviceAccountName={{ .Values.image.serviceAccount }}";
              /zeppelin/bin/zeppelin.sh
          envFrom:
          - configMapRef:
              name: {{ .Release.Name }}-configmap
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
          resources:
{{ toYaml .Values.resources | indent 12 }}
          volumeMounts:
          - name: data
            mountPath: /data/
          {{- if .Values.mountConfFiles }}
          - name: zeppelin-config-properties
            mountPath: /zeppelin/conf
          {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
      serviceAccount: {{ .Values.image.serviceAccount }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
        {{- if .Values.mountConfFiles }}
        - name: zeppelin-config-properties
          configMap:
            name: {{ .Release.Name }}-zeppelin-configmap
        {{- end }}
        - name: data
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "spark-k8s-zeppelin-chart.fullname" .) }}
        {{- else }}
          emptyDir: {}
        {{- end -}}
